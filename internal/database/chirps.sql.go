// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (body, user_id)
VALUES ($1, $2)
RETURNING id, body, user_id, created_at, updated_at
`

type CreateChirpParams struct {
	Body   string      `json:"body"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRow(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChirpById = `-- name: DeleteChirpById :exec
DELETE
FROM chirps
WHERE id = $1
`

func (q *Queries) DeleteChirpById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteChirpById, id)
	return err
}

const getChirpById = `-- name: GetChirpById :one
SELECT id, body, user_id, created_at, updated_at
FROM chirps
WHERE id = $1
`

func (q *Queries) GetChirpById(ctx context.Context, id pgtype.UUID) (Chirp, error) {
	row := q.db.QueryRow(ctx, getChirpById, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, body, user_id, created_at, updated_at
FROM chirps
ORDER BY created_at
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.Query(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpsByUserId = `-- name: GetChirpsByUserId :many
SELECT id, body, user_id, created_at, updated_at
FROM chirps
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) GetChirpsByUserId(ctx context.Context, userID pgtype.UUID) ([]Chirp, error) {
	rows, err := q.db.Query(ctx, getChirpsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
